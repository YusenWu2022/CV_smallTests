                                            svm训练识别minst数据集实验报告
                                                                                                    吴宇森 2000013137
实验目的：
        第二次作业核心是利用svm自带的训练函数进行机器学习建立预测模型并模式识别。
实验过程
         提供的代码并不完整，遇到了一些预料之外的问题并解决。
         首先，是输入输出和文件格式问题。由于对pickle文件的认识不充分，开始未能利用pickle读取图像。能够获取的文件格式还有byte和
  pkl.gz两种：尝试了byte的直接读取后最终选择较为熟悉的整合包pkl.gz类型解压并读入，得到train data和test data。
  其次，参照提供的svm.LinearSVC函数并调整参数C的大小实现了modal的训练。但在C~100的时间限制下取得的85%左右的结果不尽
  如人意，如果要达到90%以上的结果要求C不超过10，时间花费较大；于是尝试使用上课时提到的非线性svm.SVC函数在C~100下（总
  计约10min)成功达到了98%以上的识别精度，较线性结果有大幅提升。
  这中间遇到一个问题在于一步拟合很多时候会超过限制最大迭代数。查阅资料知原因在于数据的不规整和杂乱导致收敛困难。于是使用
  preprocessing 库中的preprocessing.StandardScaler()函数进行预处理。在这里遇到格式不匹配问题，通过reshape解决；最后运行时
  又遇到ArrayMemoryError问题，原来是使用的python32位最大内存只有2GB造成的，于是重装了64位以及所有库（sign),成功实现。
         接着，总感觉不能看到点什么，有点意犹未尽。于是写了mnist_imshow函数看看测试图并与逐个输出的结果人工匹配。发现虽然总体
  成功率挺高，但例如第七个case中的 9竟被识别成了0！看来在机器学习过程中少量的人工干预还是必要的。以及使用了 mglearn的
  discrete_scatter函数在图像上显示了支持向量，看起来还是分界还是相当清晰。
         最后，由于每次想要预测特定图片时总要重复训练让人难受，很自然想到尝试储存训练参数结果modal。于是用pickle.load和pickle.dump实现了
  已有模型的读取和写入储存，方便使用。
实验结果
         提交了minst.imshow.py(minst数据可视化程序）和minst.training_clarify.py（训练识别主函数）以及训练参数结果trained_modal.pickle
文件，打包完成。
                                                                               
                                                                                                                                   P.S.谢谢老师和助教！
